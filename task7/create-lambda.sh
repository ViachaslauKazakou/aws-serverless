#!/bin/bash

# Task 7: –°–æ–∑–¥–∞–Ω–∏–µ Lambda —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è API Gateway
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç Lambda —Å –Ω—É–ª—è

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
FUNCTION_NAME="task7-contacts-lambda"
RUNTIME="python3.11"  # –∏–ª–∏ nodejs18.x, nodejs20.x
HANDLER="index.handler"  # –∏–ª–∏ index.lambda_handler –¥–ª—è Python
ROLE_NAME="task7-lambda-execution-role"
REGION="eu-west-1"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  –°–æ–∑–¥–∞–Ω–∏–µ Lambda —Ñ—É–Ω–∫—Ü–∏–∏              ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å Lambda execution role
echo -e "${YELLOW}üìã –®–∞–≥ 1/5: –°–æ–∑–¥–∞–Ω–∏–µ IAM Role –¥–ª—è Lambda...${NC}"

# Trust policy –¥–ª—è Lambda
cat > /tmp/lambda-trust-policy.json <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

# –°–æ–∑–¥–∞—Ç—å role
aws iam create-role \
    --role-name "$ROLE_NAME" \
    --assume-role-policy-document file:///tmp/lambda-trust-policy.json \
    --description "Execution role for Task 7 Lambda function" \
    2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è  Role —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"

# –î–æ–±–∞–≤–∏—Ç—å managed policy –¥–ª—è CloudWatch Logs
aws iam attach-role-policy \
    --role-name "$ROLE_NAME" \
    --policy-arn "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" \
    2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è  Policy —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞${NC}"

# –ü–æ–ª—É—á–∏—Ç—å Role ARN
ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
echo -e "${GREEN}‚úÖ IAM Role —Å–æ–∑–¥–∞–Ω: $ROLE_ARN${NC}"
echo ""

# –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ role –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è propagation IAM role...${NC}"
sleep 10

# –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å Lambda code
echo -e "${YELLOW}üìù –®–∞–≥ 2/5: –°–æ–∑–¥–∞–Ω–∏–µ Lambda –∫–æ–¥–∞...${NC}"

# Python –≤–µ—Ä—Å–∏—è
cat > /tmp/lambda_function.py <<'EOF'
import json

def lambda_handler(event, context):
    """
    Lambda function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å API Gateway HTTP API (Payload Format 2.0).
    """
    
    print(f"Event: {json.dumps(event)}")
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (mock data)
    contacts = [
        {
            "id": 1,
            "name": "John Doe",
            "email": "john@example.com",
            "phone": "+1 (555) 123-4567"
        },
        {
            "id": 2,
            "name": "Jane Smith",
            "email": "jane@example.com",
            "phone": "+1 (555) 987-6543"
        },
        {
            "id": 3,
            "name": "Bob Johnson",
            "email": "bob@example.com",
            "phone": "+1 (555) 456-7890"
        }
    ]
    
    # –î–ª—è API Gateway HTTP API –Ω—É–∂–µ–Ω —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç response
    return {
        "statusCode": 200,
        "headers": {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*"  # CORS
        },
        "body": json.dumps(contacts)
    }
EOF

# Node.js –≤–µ—Ä—Å–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
cat > /tmp/index.js <<'EOF'
exports.handler = async (event) => {
    console.log('Event:', JSON.stringify(event, null, 2));
    
    // –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (mock data)
    const contacts = [
        {
            id: 1,
            name: "John Doe",
            email: "john@example.com",
            phone: "+1 (555) 123-4567"
        },
        {
            id: 2,
            name: "Jane Smith",
            email: "jane@example.com",
            phone: "+1 (555) 987-6543"
        },
        {
            id: 3,
            name: "Bob Johnson",
            email: "bob@example.com",
            phone: "+1 (555) 456-7890"
        }
    ];
    
    // –î–ª—è API Gateway HTTP API –Ω—É–∂–µ–Ω —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç response
    return {
        statusCode: 200,
        headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'  // CORS
        },
        body: JSON.stringify(contacts)
    };
};
EOF

# –£–ø–∞–∫–æ–≤–∞—Ç—å –≤ ZIP
cd /tmp
if [ "$RUNTIME" == "python3.11" ]; then
    zip -q lambda-code.zip lambda_function.py
    HANDLER="lambda_function.lambda_handler"
else
    zip -q lambda-code.zip index.js
    HANDLER="index.handler"
fi

echo -e "${GREEN}‚úÖ Lambda –∫–æ–¥ —Å–æ–∑–¥–∞–Ω –∏ —É–ø–∞–∫–æ–≤–∞–Ω${NC}"
echo ""

# –®–∞–≥ 3: –°–æ–∑–¥–∞—Ç—å Lambda —Ñ—É–Ω–∫—Ü–∏—é
echo -e "${YELLOW}üöÄ –®–∞–≥ 3/5: –°–æ–∑–¥–∞–Ω–∏–µ Lambda —Ñ—É–Ω–∫—Ü–∏–∏...${NC}"

aws lambda create-function \
    --function-name "$FUNCTION_NAME" \
    --runtime "$RUNTIME" \
    --role "$ROLE_ARN" \
    --handler "$HANDLER" \
    --zip-file fileb:///tmp/lambda-code.zip \
    --timeout 30 \
    --memory-size 128 \
    --description "Lambda function for Task 7 - returns contacts list" \
    --environment "Variables={ENVIRONMENT=production}" \
    2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è  Lambda —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"

# –ü–æ–ª—É—á–∏—Ç—å Lambda ARN
LAMBDA_ARN=$(aws lambda get-function \
    --function-name "$FUNCTION_NAME" \
    --query 'Configuration.FunctionArn' \
    --output text)

echo -e "${GREEN}‚úÖ Lambda —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $LAMBDA_ARN${NC}"
echo ""

# –®–∞–≥ 4: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Lambda
echo -e "${YELLOW}üß™ –®–∞–≥ 4/5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lambda —Ñ—É–Ω–∫—Ü–∏–∏...${NC}"

# –°–æ–∑–¥–∞—Ç—å test event (API Gateway HTTP API format)
cat > /tmp/test-event.json <<'EOF'
{
  "version": "2.0",
  "routeKey": "GET /contacts",
  "rawPath": "/contacts",
  "rawQueryString": "",
  "headers": {
    "accept": "*/*",
    "content-length": "0",
    "host": "example.execute-api.eu-west-1.amazonaws.com",
    "user-agent": "curl/7.79.1"
  },
  "requestContext": {
    "accountId": "123456789012",
    "apiId": "api123",
    "http": {
      "method": "GET",
      "path": "/contacts",
      "protocol": "HTTP/1.1",
      "sourceIp": "1.2.3.4",
      "userAgent": "curl/7.79.1"
    },
    "routeKey": "GET /contacts",
    "stage": "$default",
    "time": "01/Jan/2024:12:00:00 +0000",
    "timeEpoch": 1704110400000
  }
}
EOF

# –í—ã–∑–≤–∞—Ç—å Lambda
aws lambda invoke \
    --function-name "$FUNCTION_NAME" \
    --payload file:///tmp/test-event.json \
    /tmp/lambda-response.json \
    --query 'StatusCode' \
    --output text > /dev/null

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å response
if [ -f /tmp/lambda-response.json ]; then
    echo -e "${GREEN}‚úÖ Lambda —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å${NC}"
    echo -e "${GREEN}Response:${NC}"
    cat /tmp/lambda-response.json | python3 -m json.tool 2>/dev/null || cat /tmp/lambda-response.json
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Lambda${NC}"
fi
echo ""

# –®–∞–≥ 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Lambda
echo -e "${YELLOW}üìä –®–∞–≥ 5/5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Lambda —Ñ—É–Ω–∫—Ü–∏–∏...${NC}"

aws lambda get-function-configuration \
    --function-name "$FUNCTION_NAME" \
    --query '{Name:FunctionName, Runtime:Runtime, Handler:Handler, State:State, Memory:MemorySize, Timeout:Timeout, LastModified:LastModified}' \
    --output table

echo ""

# –ò—Ç–æ–≥–∏
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  ‚úÖ Lambda —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!           ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${GREEN}–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:${NC}"
echo -e "  ‚úÖ IAM Role: $ROLE_NAME"
echo -e "  ‚úÖ Lambda Function: $FUNCTION_NAME"
echo -e "  ‚úÖ Runtime: $RUNTIME"
echo -e "  ‚úÖ Handler: $HANDLER"
echo ""
echo -e "${YELLOW}Lambda ARN (–¥–ª—è API Gateway):${NC}"
echo -e "  $LAMBDA_ARN"
echo ""
echo -e "${YELLOW}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo -e "  1. –°–æ–∑–¥–∞—Ç—å API Gateway: ./create-api-gateway.sh"
echo -e "  2. –°–æ–∑–¥–∞—Ç—å Integration: ./create-integration.sh"
echo -e "  3. –î–æ–±–∞–≤–∏—Ç—å Permission: ./add-lambda-permission.sh"
echo ""
echo -e "${YELLOW}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ Lambda"
echo -e "  aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://lambda-code.zip"
echo ""
echo -e "  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏"
echo -e "  aws logs tail /aws/lambda/$FUNCTION_NAME --follow"
echo ""
echo -e "  # –£–¥–∞–ª–∏—Ç—å Lambda"
echo -e "  aws lambda delete-function --function-name $FUNCTION_NAME"
echo -e "  aws iam detach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
echo -e "  aws iam delete-role --role-name $ROLE_NAME"
echo ""
