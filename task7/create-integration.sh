#!/bin/bash

# Task 7: –°–æ–∑–¥–∞–Ω–∏–µ Integration –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ permissions
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–≤—è–∑—ã–≤–∞–µ—Ç API Gateway —Å Lambda

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  –°–æ–∑–¥–∞–Ω–∏–µ Integration –∏ Permissions   ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏ API Gateway —Å–∫—Ä–∏–ø—Ç–æ–º)
if [ -f /tmp/task7-api-vars.sh ]; then
    source /tmp/task7-api-vars.sh
    echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ /tmp/task7-api-vars.sh${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é:${NC}"
    echo -e "export API_ID=\"your-api-id\""
    echo -e "export ROUTE_ID_GET=\"your-route-id\""
    echo ""
fi

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if [ -z "$API_ID" ]; then
    echo -e "${RED}‚ùå API_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${NC}"
    echo -e "export API_ID=\"erv7myh2nb\""
    exit 1
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Lambda
LAMBDA_FUNCTION="${LAMBDA_FUNCTION:-task7-contacts-lambda}"
REGION="${REGION:-eu-west-1}"
ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)

echo -e "${YELLOW}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
echo -e "  API ID: $API_ID"
echo -e "  Lambda: $LAMBDA_FUNCTION"
echo -e "  Region: $REGION"
echo -e "  Account: $ACCOUNT_ID"
echo ""

# –ü–æ–ª—É—á–∏—Ç—å Lambda ARN
LAMBDA_ARN=$(aws lambda get-function \
    --function-name "$LAMBDA_FUNCTION" \
    --query 'Configuration.FunctionArn' \
    --output text 2>/dev/null)

if [ -z "$LAMBDA_ARN" ]; then
    echo -e "${RED}‚ùå Lambda —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $LAMBDA_FUNCTION${NC}"
    echo -e "${YELLOW}–°–æ–∑–¥–∞–π—Ç–µ Lambda: ./create-lambda.sh${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Lambda ARN: $LAMBDA_ARN${NC}"
echo ""

# –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å Integration
echo -e "${YELLOW}üìã –®–∞–≥ 1/4: –°–æ–∑–¥–∞–Ω–∏–µ Lambda Integration...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ integrations
EXISTING_INTEGRATION=$(aws apigatewayv2 get-integrations \
    --api-id "$API_ID" \
    --query "Items[?IntegrationUri=='$LAMBDA_ARN'].IntegrationId" \
    --output text 2>/dev/null || echo "")

if [ -n "$EXISTING_INTEGRATION" ]; then
    INTEGRATION_ID="$EXISTING_INTEGRATION"
    echo -e "${YELLOW}‚ö†Ô∏è  Lambda integration —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: $INTEGRATION_ID)${NC}"
else
    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π integration
    INTEGRATION_ID=$(aws apigatewayv2 create-integration \
        --api-id "$API_ID" \
        --integration-type AWS_PROXY \
        --integration-uri "$LAMBDA_ARN" \
        --payload-format-version 2.0 \
        --timeout-in-millis 30000 \
        --description "Lambda integration for contacts API" \
        --query 'IntegrationId' \
        --output text)
    
    echo -e "${GREEN}‚úÖ Lambda integration —Å–æ–∑–¥–∞–Ω (ID: $INTEGRATION_ID)${NC}"
fi

echo ""

# –®–∞–≥ 2: –ü—Ä–∏–≤—è–∑–∞—Ç—å routes –∫ integration
echo -e "${YELLOW}üîó –®–∞–≥ 2/4: –ü—Ä–∏–≤—è–∑–∫–∞ routes –∫ integration...${NC}"

# –ü—Ä–∏–≤—è–∑–∞—Ç—å GET /contacts
if [ -n "$ROUTE_ID_GET" ]; then
    aws apigatewayv2 update-route \
        --api-id "$API_ID" \
        --route-id "$ROUTE_ID_GET" \
        --target "integrations/$INTEGRATION_ID" \
        --output json > /dev/null
    echo -e "${GREEN}‚úÖ Route GET /contacts –ø—Ä–∏–≤—è–∑–∞–Ω –∫ integration${NC}"
fi

# –ü—Ä–∏–≤—è–∑–∞—Ç—å POST /contacts (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ -n "$ROUTE_ID_POST" ]; then
    aws apigatewayv2 update-route \
        --api-id "$API_ID" \
        --route-id "$ROUTE_ID_POST" \
        --target "integrations/$INTEGRATION_ID" \
        --output json > /dev/null 2>&1 && \
    echo -e "${GREEN}‚úÖ Route POST /contacts –ø—Ä–∏–≤—è–∑–∞–Ω –∫ integration${NC}"
fi

# –ü—Ä–∏–≤—è–∑–∞—Ç—å GET /contacts/{id} (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ -n "$ROUTE_ID_GET_ID" ]; then
    aws apigatewayv2 update-route \
        --api-id "$API_ID" \
        --route-id "$ROUTE_ID_GET_ID" \
        --target "integrations/$INTEGRATION_ID" \
        --output json > /dev/null 2>&1 && \
    echo -e "${GREEN}‚úÖ Route GET /contacts/{id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ integration${NC}"
fi

# –ü—Ä–∏–≤—è–∑–∞—Ç—å DELETE /contacts/{id} (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ -n "$ROUTE_ID_DELETE" ]; then
    aws apigatewayv2 update-route \
        --api-id "$API_ID" \
        --route-id "$ROUTE_ID_DELETE" \
        --target "integrations/$INTEGRATION_ID" \
        --output json > /dev/null 2>&1 && \
    echo -e "${GREEN}‚úÖ Route DELETE /contacts/{id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ integration${NC}"
fi

echo ""

# –®–∞–≥ 3: –î–æ–±–∞–≤–∏—Ç—å Lambda permission
echo -e "${YELLOW}üîê –®–∞–≥ 3/4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Lambda permissions...${NC}"

# Source ARN –¥–ª—è API Gateway
SOURCE_ARN="arn:aws:execute-api:$REGION:$ACCOUNT_ID:$API_ID/*/*"

# –î–æ–±–∞–≤–∏—Ç—å permission
aws lambda add-permission \
    --function-name "$LAMBDA_FUNCTION" \
    --statement-id "AllowAPIGatewayInvoke-${API_ID}" \
    --action "lambda:InvokeFunction" \
    --principal "apigateway.amazonaws.com" \
    --source-arn "$SOURCE_ARN" \
    --output json > /dev/null 2>&1 || echo -e "${YELLOW}‚ö†Ô∏è  Permission –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"

echo -e "${GREEN}‚úÖ Lambda permission –¥–ª—è API Gateway –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
echo ""

# –®–∞–≥ 4: Deploy API (–¥–ª—è HTTP API auto-deploy enabled –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
echo -e "${YELLOW}üöÄ –®–∞–≥ 4/4: Deployment...${NC}"

# –î–ª—è HTTP API —Å auto-deploy –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
# –ù–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å explicit deployment
DEPLOYMENT_ID=$(aws apigatewayv2 create-deployment \
    --api-id "$API_ID" \
    --description "Integration with Lambda function" \
    --query 'DeploymentId' \
    --output text 2>/dev/null || echo "")

if [ -n "$DEPLOYMENT_ID" ]; then
    echo -e "${GREEN}‚úÖ Deployment —Å–æ–∑–¥–∞–Ω (ID: $DEPLOYMENT_ID)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Auto-deploy enabled, manual deployment –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è${NC}"
fi

echo ""

# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏                ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å integration
echo -e "${YELLOW}üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Integration...${NC}"
INTEGRATION_TYPE=$(aws apigatewayv2 get-integration \
    --api-id "$API_ID" \
    --integration-id "$INTEGRATION_ID" \
    --query 'IntegrationType' \
    --output text)

if [ "$INTEGRATION_TYPE" == "AWS_PROXY" ]; then
    echo -e "${GREEN}‚úÖ Integration type: AWS_PROXY${NC}"
else
    echo -e "${RED}‚ùå Integration type: $INTEGRATION_TYPE (–æ–∂–∏–¥–∞–ª–æ—Å—å AWS_PROXY)${NC}"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å routes
echo -e "${YELLOW}üß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Routes...${NC}"
ROUTE_COUNT=$(aws apigatewayv2 get-routes \
    --api-id "$API_ID" \
    --query "length(Items[?Target=='integrations/$INTEGRATION_ID'])" \
    --output text)

echo -e "${GREEN}‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ routes: $ROUTE_COUNT${NC}"

# 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Lambda permission
echo -e "${YELLOW}üß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Lambda Permission...${NC}"
LAMBDA_POLICY=$(aws lambda get-policy \
    --function-name "$LAMBDA_FUNCTION" \
    --query 'Policy' \
    --output text 2>/dev/null || echo "{}")

if echo "$LAMBDA_POLICY" | grep -q "apigateway.amazonaws.com"; then
    echo -e "${GREEN}‚úÖ Lambda permission –¥–ª—è API Gateway –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
else
    echo -e "${RED}‚ùå Lambda permission –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

# 4. HTTP —Ç–µ—Å—Ç
echo -e "${YELLOW}üß™ –¢–µ—Å—Ç 4: HTTP –∑–∞–ø—Ä–æ—Å –∫ API...${NC}"

# –ü–æ–ª—É—á–∏—Ç—å API endpoint
API_ENDPOINT=$(aws apigatewayv2 get-api \
    --api-id "$API_ID" \
    --query 'ApiEndpoint' \
    --output text)

FULL_ENDPOINT="$API_ENDPOINT/contacts"
echo -e "${BLUE}   –ó–∞–ø—Ä–æ—Å –∫: $FULL_ENDPOINT${NC}"

# –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è propagation
sleep 3

HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_ENDPOINT" 2>/dev/null || echo "000")

if [ "$HTTP_CODE" == "200" ]; then
    echo -e "${GREEN}‚úÖ API —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP 200)${NC}"
    echo -e "${GREEN}Response:${NC}"
    curl -s "$FULL_ENDPOINT" | python3 -m json.tool 2>/dev/null | head -20
elif [ "$HTTP_CODE" == "000" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  HTTP Status: $HTTP_CODE${NC}"
    echo -e "${YELLOW}–ï—Å–ª–∏ 404 –∏–ª–∏ 403, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10-20 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞${NC}"
fi

echo ""

# –ò—Ç–æ–≥–∏
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  ‚úÖ Integration –Ω–∞—Å—Ç—Ä–æ–µ–Ω!              ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${GREEN}–°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
echo -e "  ‚úÖ Lambda Integration (AWS_PROXY)"
echo -e "  ‚úÖ Routes –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ Lambda"
echo -e "  ‚úÖ Lambda Permission –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
echo -e "  ‚úÖ API deployed"
echo ""
echo -e "${YELLOW}API Endpoints:${NC}"
echo -e "  GET    $API_ENDPOINT/contacts"
echo -e "  POST   $API_ENDPOINT/contacts"
echo -e "  GET    $API_ENDPOINT/contacts/{id}"
echo -e "  DELETE $API_ENDPOINT/contacts/{id}"
echo ""
echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}"
echo -e "  # GET request"
echo -e "  curl $API_ENDPOINT/contacts"
echo ""
echo -e "  # Browser"
echo -e "  open $API_ENDPOINT/contacts"
echo ""
echo -e "  # Lambda logs"
echo -e "  aws logs tail /aws/lambda/$LAMBDA_FUNCTION --follow"
echo ""
echo -e "${YELLOW}Troubleshooting:${NC}"
echo -e "  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å integration"
echo -e "  aws apigatewayv2 get-integration --api-id $API_ID --integration-id $INTEGRATION_ID"
echo ""
echo -e "  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å routes"
echo -e "  aws apigatewayv2 get-routes --api-id $API_ID"
echo ""
echo -e "  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Lambda permission"
echo -e "  aws lambda get-policy --function-name $LAMBDA_FUNCTION | jq"
echo ""
